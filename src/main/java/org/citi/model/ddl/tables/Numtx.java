/*
 * This file is generated by jOOQ.
*/
package org.citi.model.ddl.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.citi.model.ddl.Indexes;
import org.citi.model.ddl.Keys;
import org.citi.model.ddl.Public;
import org.citi.model.ddl.tables.records.NumtxRecord;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Numtx extends TableImpl<NumtxRecord> {

    private static final long serialVersionUID = 512417394;

    /**
     * The reference instance of <code>PUBLIC.NUMTX</code>
     */
    public static final Numtx NUMTX = new Numtx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NumtxRecord> getRecordType() {
        return NumtxRecord.class;
    }

    /**
     * The column <code>PUBLIC.NUMTX.ID</code>.
     */
    public final TableField<NumtxRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_7FF407BD_96F3_44C6_99C1_094D9C5B01A1)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.NUMTX.FROMTIME</code>.
     */
    public final TableField<NumtxRecord, String> FROMTIME = createField("FROMTIME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.NUMTX.NUMERR</code>.
     */
    public final TableField<NumtxRecord, Integer> NUMERR = createField("NUMERR", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.NUMTX.NUMTX</code>.
     */
    public final TableField<NumtxRecord, Integer> NUMTX_ = createField("NUMTX", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.NUMTX.OPERATIONNAME</code>.
     */
    public final TableField<NumtxRecord, String> OPERATIONNAME = createField("OPERATIONNAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.NUMTX.TOTIME</code>.
     */
    public final TableField<NumtxRecord, String> TOTIME = createField("TOTIME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.NUMTX</code> table reference
     */
    public Numtx() {
        this(DSL.name("NUMTX"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.NUMTX</code> table reference
     */
    public Numtx(String alias) {
        this(DSL.name(alias), NUMTX);
    }

    /**
     * Create an aliased <code>PUBLIC.NUMTX</code> table reference
     */
    public Numtx(Name alias) {
        this(alias, NUMTX);
    }

    private Numtx(Name alias, Table<NumtxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Numtx(Name alias, Table<NumtxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NumtxRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NumtxRecord>> getKeys() {
        return Arrays.<UniqueKey<NumtxRecord>>asList(Keys.CONSTRAINT_4, Keys.U_NUMTX_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Numtx as(String alias) {
        return new Numtx(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Numtx as(Name alias) {
        return new Numtx(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Numtx rename(String name) {
        return new Numtx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Numtx rename(Name name) {
        return new Numtx(name, null);
    }
}
