/*
 * This file is generated by jOOQ.
*/
package gon.cue.model.ddl.tables;


import gon.cue.model.ddl.Indexes;
import gon.cue.model.ddl.Keys;
import gon.cue.model.ddl.Public;
import gon.cue.model.ddl.tables.records.MegaUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MegaUser extends TableImpl<MegaUserRecord> {

    private static final long serialVersionUID = -453956204;

    /**
     * The reference instance of <code>PUBLIC.MEGA_USER</code>
     */
    public static final MegaUser MEGA_USER = new MegaUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MegaUserRecord> getRecordType() {
        return MegaUserRecord.class;
    }

    /**
     * The column <code>PUBLIC.MEGA_USER.ID</code>.
     */
    public final TableField<MegaUserRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.MEGA_USER.USER_NAME</code>.
     */
    public final TableField<MegaUserRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MEGA_USER.USER_PASSWORD</code>.
     */
    public final TableField<MegaUserRecord, String> USER_PASSWORD = createField("USER_PASSWORD", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MEGA_USER.ID_CONFIG</code>.
     */
    public final TableField<MegaUserRecord, Integer> ID_CONFIG = createField("ID_CONFIG", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.MEGA_USER</code> table reference
     */
    public MegaUser() {
        this(DSL.name("MEGA_USER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.MEGA_USER</code> table reference
     */
    public MegaUser(String alias) {
        this(DSL.name(alias), MEGA_USER);
    }

    /**
     * Create an aliased <code>PUBLIC.MEGA_USER</code> table reference
     */
    public MegaUser(Name alias) {
        this(alias, MEGA_USER);
    }

    private MegaUser(Name alias, Table<MegaUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MegaUser(Name alias, Table<MegaUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_IDX_10107, Indexes.SYS_IDX_SYS_PK_10098_10102);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MegaUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEGA_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MegaUserRecord> getPrimaryKey() {
        return Keys.SYS_PK_10098;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MegaUserRecord>> getKeys() {
        return Arrays.<UniqueKey<MegaUserRecord>>asList(Keys.SYS_PK_10098);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MegaUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MegaUserRecord, ?>>asList(Keys.MEGA_USER_MEGA_CONFIGURATIONS_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MegaUser as(String alias) {
        return new MegaUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MegaUser as(Name alias) {
        return new MegaUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MegaUser rename(String name) {
        return new MegaUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MegaUser rename(Name name) {
        return new MegaUser(name, null);
    }
}
